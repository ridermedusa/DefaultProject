<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NSTool.UMengPush</name>
    </assembly>
    <members>
        <member name="T:NSTool.UMengPush.Base.CommonHelper">
            <summary>
             create by 刘敬
            </summary>
        </member>
        <member name="M:NSTool.UMengPush.Base.CommonHelper.GetContentType(System.String)">
            <summary>    
            从注册表获取文件类型
            你也可以使用ContentTypesConst里面的只读文本，以便加快速度访问
            </summary>    
            <param name="filename">包含扩展名的文件名</param>    
            <returns>文件类型[如：application/stream,]</returns>    
        </member>
        <member name="T:NSTool.UMengPush.Base.MD5CryptionUMeng">
            <summary>
            MD5加密工具类(MD5为不可逆加密方式)
             author: 刘敬
            </summary>
        </member>
        <member name="M:NSTool.UMengPush.Base.MD5CryptionUMeng.GenerateMD5(System.Byte[])">
            <summary>
            生成MD5加密摘要
            </summary>
            <param name="original">数据源</param>
            <returns>MD5加密后</returns>
        </member>
        <member name="M:NSTool.UMengPush.Base.MD5CryptionUMeng.GenerateMD5(System.Byte[],System.Int32,System.Int32)">
            <summary>
            生成MD5加密摘要
            </summary>
            <param name="original">数据源</param>
            <param name="index">起始位置</param>
            <param name="length">长度</param>
            <returns>MD5加密后</returns>
        </member>
        <member name="M:NSTool.UMengPush.Base.MD5CryptionUMeng.GenerateMD5(System.String)">
            <summary>
            生成MD5加密摘要
            </summary>
            <param name="strOriginal">字符串数据源</param>
            <returns>MD5加密后</returns>
        </member>
        <member name="M:NSTool.UMengPush.Base.MD5CryptionUMeng.GetFileMD5(System.String)">
            <summary>
            获取文件的MD5码
            </summary>
            <param name="filename">文件路径</param>
            <returns>文件内容加密后的字符串</returns>
        </member>
        <member name="T:NSTool.UMengPush.Core.PostUMengJson">
            <summary>
            发送到友盟的json实体类
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.PostUMengJson.appkey">
            <summary>
            必填 应用唯一标识
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.PostUMengJson.timestamp">
            <summary>
            注意：该值由UMengMessagePush自动生成，无需主动赋值
            必填 时间戳，10位或者13位均可，时间戳有效期为10分钟 
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.PostUMengJson.type">
             <summary>
             必填 消息发送类型,其值可以为:
             <example>
             unicast-单播
             listcast-列播(要求不超过500个device_token)
             filecast-文件播
             (多个device_token可通过文件形式批量发送）
             broadcast-广播
             groupcast-组播
             (按照filter条件筛选特定用户群, 具体请参照filter参数)
             customizedcast(通过开发者自有的alias进行推送), 
             包括以下两种case:
             alias: 对单个或者多个alias进行推送
             file_id: 将alias存放到文件后，根据file_id来推送
            </example>
             </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.PostUMengJson.device_tokens">
            <summary>
            可选 设备唯一表示
            </summary>
            <example>
            当type=unicast时,必填, 表示指定的单个设备
            当type=listcast时,必填,要求不超过500个，多个device_token以英文逗号间隔
            </example>
        </member>
        <member name="P:NSTool.UMengPush.Core.PostUMengJson.alias_type">
            <summary>
            可选 
            <example>
            当type=customizedcast时必填，
            alias的类型，alias_type可由开发者自定义，开发者在SDK中调用setAlias(alias, alias_type)时所设置的alias_type
            </example>
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.PostUMengJson.alias">
            <summary>
            可选 当type=customizedcast时, 
            开发者填写自己的alias。 要求不超过50个alias,多个alias以英文逗号间隔。
            在SDK中调用setAlias(alias, alias_type)时所设置的alias
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.PostUMengJson.file_id">
            <summary>
            可选
            </summary>
            <example>
            当type=filecast时，file内容为多条device_token，device_token以回车符分隔
            当type=customizedcast时，file内容为多条alias，alias以回车符分隔，注意同一个文件内的alias所对应的alias_type必须和接口参数alias_type一致。
            注意，使用文件播前需要先调用文件上传接口获取file_id, 具体请参照"2.4文件上传接口"
            </example>
        </member>
        <member name="P:NSTool.UMengPush.Core.PostUMengJson.payload">
            <summary>
            必填 消息内容(Android最大为1840B),
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.PostUMengJson.policy">
            <summary>
            可选 发送策略
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.PostUMengJson.production_mode">
            <summary>
            可选 正式/测试模式。测试模式下，广播/组播只会将消息发给测试设备。
            </summary>
            <example>
            测试设备需要到web上添加。
            Android: 测试设备属于正式设备的一个子集。
            </example>
        </member>
        <member name="P:NSTool.UMengPush.Core.PostUMengJson.description">
            <summary>
            可选 发送消息描述，建议填写。
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.PostUMengJson.thirdparty_id">
            <summary>
            可选 开发者自定义消息标识ID, 开发者可以为同一批发送的消息提供
            </summary>
        </member>
        <member name="T:NSTool.UMengPush.Core.Payload">
            <summary>
            消息内容
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.Payload.aps">
            <summary>
             严格按照APNs定义来填写
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.Payload.display_type">
            <summary>
            必填 消息类型，值可以为:notification-通知，message-消息
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.Payload.body">
            <summary>
            必填 消息体
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.Payload.extra">
            <summary>
            可选 用户自定义key-value。只对"通知"(display_type=notification)生效。
            可以配合通知到达后,打开App,打开URL,打开Activity使用。
            </summary>
        </member>
        <member name="T:NSTool.UMengPush.Core.Aps">
            <summary>
            APNs
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.Aps.alert">
            <summary>
            必填-标题
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.Aps.sound">
            <summary>
            选填-声音
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.Aps.content_available">
            <summary>
            可选
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.Aps.category">
            <summary>
            可选, 注意: ios8才支持该字段。
            </summary>
        </member>
        <member name="T:NSTool.UMengPush.Core.ContentBody">
            <summary>
            消息体
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.ContentBody.ticker">
            <summary>
            必填 通知栏提示文字
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.ContentBody.title">
            <summary>
            必填 通知标题
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.ContentBody.text">
            <summary>
            必填 通知文字描述
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.ContentBody.icon">
            <summary>
            可选 状态栏图标ID, R.drawable.[smallIcon]
            </summary>
            <example>
            如果没有, 默认使用应用图标。
            图片要求为24*24dp的图标,或24*24px放在drawable-mdpi下。
            注意四周各留1个dp的空白像素
            </example>
        </member>
        <member name="P:NSTool.UMengPush.Core.ContentBody.largeIcon">
            <summary>
            可选 通知栏拉开后左侧图标ID, R.drawable.[largeIcon]
            </summary>
            <example>
            图片要求为64*64dp的图标
            可设计一张64*64px放在drawable-mdpi下
            注意图片四周留空，不至于显示太拥挤
            </example>
        </member>
        <member name="P:NSTool.UMengPush.Core.ContentBody.img">
            <summary>
            可选 通知栏大图标的URL链接。该字段的优先级大于largeIcon
            </summary>
            <example>
            该字段要求以http或者https开头
            </example>
        </member>
        <member name="P:NSTool.UMengPush.Core.ContentBody.sound">
            <summary>
            可选 通知声音，R.raw.[sound]
            </summary>
            <example>
            如果该字段为空，采用SDK默认的声音, 即res/raw/下的umeng_push_notification_default_sound声音文件
            如果SDK默认声音文件不存在，则使用系统默认的Notification提示音。
            </example>
        </member>
        <member name="P:NSTool.UMengPush.Core.ContentBody.builder_id">
            <summary>
            可选 自定义通知样式:
            </summary>
            <example>
            默认为0，用于标识该通知采用的样式。使用该参数时,开发者必须在SDK里面实现自定义通知栏样式。
            </example>
        </member>
        <member name="P:NSTool.UMengPush.Core.ContentBody.play_vibrate">
            <summary>
            可选 通知到达设备后的提醒方式 收到通知是否震动,默认为"true".
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.ContentBody.play_lights">
            <summary>
            可选 收到通知是否闪灯,默认为"true"
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.ContentBody.play_sound">
            <summary>
            可选 收到通知是否发出声音,默认为"true"
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.ContentBody.after_open">
            <summary>
            必填 点击"通知"的后续行为，默认为打开app。
            </summary>
            <example>
             取值：
            "go_app": 打开应用
            "go_url": 跳转到URL
            "go_activity": 打开特定的activity
            "go_custom": 用户自定义内容。
            </example>
        </member>
        <member name="P:NSTool.UMengPush.Core.ContentBody.url">
            <summary>
            可选 当"after_open"为"go_url"时，必填。
            通知栏点击后跳转的URL，要求以http或者https开头  
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.ContentBody.activity">
            <summary>
            可选 当"after_open"为"go_activity"时，必填。
            通知栏点击后打开的Activity
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.ContentBody.custom">
            <summary>
            可选 display_type=message, 或者 display_type=notification且"after_open"为"go_custom"时，该字段必填
            用户自定义内容, 可以为字符串或者JSON格式。
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.Policy.start_time">
            <summary>
            可选 定时发送时间，若不填写表示立即发送。
            </summary>
            <example>
            定时发送时间不能小于当前时间
            格式: "YYYY-MM-DD HH:mm:ss"。 
            注意, start_time只对任务生效。
            </example>
        </member>
        <member name="P:NSTool.UMengPush.Core.Policy.expire_time">
            <summary>
            可选 消息过期时间,其值不可小于发送时间或者
            </summary>
            <example>
            start_time(如果填写了的话), 
            如果不填写此参数，默认为3天后过期。格式同start_time
            </example>
        </member>
        <member name="P:NSTool.UMengPush.Core.Policy.max_send_num">
            <summary>
            可选 发送限速，每秒发送的最大条数。
            </summary>
            <exampe>
            开发者发送的消息如果有请求自己服务器的资源，可以考虑此参数。
            </exampe>
        </member>
        <member name="P:NSTool.UMengPush.Core.Policy.out_biz_no">
            <summary>
            可选 开发者对消息的唯一标识，服务器会根据这个标识避免重复发送。
            </summary>
            <example>
            有些情况下（例如网络异常）开发者可能会重复调用API导致
            消息多次下发到客户端。如果需要处理这种情况，可以考虑此参数。
            注意, out_biz_no只对任务生效。
            </example>
        </member>
        <member name="P:NSTool.UMengPush.Core.ReturnJsonClass.ret">
            <summary>
            返回结果，"SUCCESS"或者"FAIL"
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.ReturnJsonClass.data">
            <summary>
            结果具体信息
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.ResultInfo.msg_id">
            <summary>
            当"ret"为"SUCCESS"时,包含如下参数:
            当type为unicast、listcast或者customizedcast且alias不为空时:
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.ResultInfo.task_id">
            <summary>
            当type为于broadcast、groupcast、filecast、customizedcast且file_id不为空的情况(任务)
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.ResultInfo.error_code">
            <summary>
            当"ret"为"FAIL"时,包含如下参数:错误码详见附录I。
            </summary>
        </member>
        <member name="P:NSTool.UMengPush.Core.ResultInfo.thirdparty_id">
            <summary>
            如果开发者填写了thirdparty_id, 接口也会返回该值。
            </summary>
        </member>
        <member name="T:NSTool.UMengPush.UMengMessagePush">
            <summary>
            友盟消息推送
            create by jasnature
            </summary>
        </member>
        <member name="M:NSTool.UMengPush.UMengMessagePush.#ctor(System.String,System.String)">
            <summary>
            使用默认的参数构造,参数从友盟网站的应用信息中获取
            </summary>
            <param name="appkey">appkey</param>
            <param name="appMasterSecret">App Master Secret，供API对接友盟服务器使用的密钥</param>
        </member>
        <member name="M:NSTool.UMengPush.UMengMessagePush.SendMessage(NSTool.UMengPush.Core.PostUMengJson)">
            <summary>
            推送消息，注意如果初始化本类已经填写了appkey，
            <paramref name="paramsJsonObj"/> 里面的appkey会自动赋值
            反之如果您填写了<paramref name="paramsJsonObj"/> 里面的appkey，将采用参数里面的值，忽略本类初始化值。
            </summary>
            <param name="paramsJsonObj"></param>
            <returns></returns>
        </member>
        <member name="M:NSTool.UMengPush.UMengMessagePush.AsynSendMessage(NSTool.UMengPush.Core.PostUMengJson,System.Action{NSTool.UMengPush.Core.ReturnJsonClass})">
            <summary>
            异步推送消息，注意如果初始化本类已经填写了appkey，
            <paramref name="paramsJsonObj"/> 里面的appkey会自动赋值
            反之如果您填写了<paramref name="paramsJsonObj"/> 里面的appkey，将采用参数里面的值，忽略本类初始化值。 
            </summary>
            <param name="paramsJsonObj"></param>
            <param name="callback"></param>
        </member>
        <member name="M:NSTool.UMengPush.UMengMessagePush.GetTimeStamp">
            <summary>
            获取时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="M:NSTool.UMengPush.UMengMessagePush.GetCacheParamType``1(``0)">
            <summary>
            多线程安全缓存参数类型集合
            </summary>
        </member>
    </members>
</doc>
